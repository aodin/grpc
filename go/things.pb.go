// Code generated by protoc-gen-go. DO NOT EDIT.
// source: things.proto

/*
Package things is a generated protocol buffer package.

It is generated from these files:
	things.proto

It has these top-level messages:
	Thing
	GetThingRequest
	QueryThingsRequest
*/
package things

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Thing struct {
	Id      uint64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name    string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Content []byte `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
}

func (m *Thing) Reset()                    { *m = Thing{} }
func (m *Thing) String() string            { return proto.CompactTextString(m) }
func (*Thing) ProtoMessage()               {}
func (*Thing) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Thing) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Thing) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Thing) GetContent() []byte {
	if m != nil {
		return m.Content
	}
	return nil
}

type GetThingRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *GetThingRequest) Reset()                    { *m = GetThingRequest{} }
func (m *GetThingRequest) String() string            { return proto.CompactTextString(m) }
func (*GetThingRequest) ProtoMessage()               {}
func (*GetThingRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *GetThingRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryThingsRequest struct {
	Search string `protobuf:"bytes,1,opt,name=search" json:"search,omitempty"`
	Order  string `protobuf:"bytes,2,opt,name=order" json:"order,omitempty"`
	Limit  uint64 `protobuf:"varint,3,opt,name=limit" json:"limit,omitempty"`
	Offset uint64 `protobuf:"varint,4,opt,name=offset" json:"offset,omitempty"`
}

func (m *QueryThingsRequest) Reset()                    { *m = QueryThingsRequest{} }
func (m *QueryThingsRequest) String() string            { return proto.CompactTextString(m) }
func (*QueryThingsRequest) ProtoMessage()               {}
func (*QueryThingsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *QueryThingsRequest) GetSearch() string {
	if m != nil {
		return m.Search
	}
	return ""
}

func (m *QueryThingsRequest) GetOrder() string {
	if m != nil {
		return m.Order
	}
	return ""
}

func (m *QueryThingsRequest) GetLimit() uint64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *QueryThingsRequest) GetOffset() uint64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func init() {
	proto.RegisterType((*Thing)(nil), "things.Thing")
	proto.RegisterType((*GetThingRequest)(nil), "things.GetThingRequest")
	proto.RegisterType((*QueryThingsRequest)(nil), "things.QueryThingsRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Things service

type ThingsClient interface {
	Create(ctx context.Context, in *Thing, opts ...grpc.CallOption) (*Thing, error)
	Get(ctx context.Context, in *GetThingRequest, opts ...grpc.CallOption) (*Thing, error)
	Query(ctx context.Context, in *QueryThingsRequest, opts ...grpc.CallOption) (Things_QueryClient, error)
}

type thingsClient struct {
	cc *grpc.ClientConn
}

func NewThingsClient(cc *grpc.ClientConn) ThingsClient {
	return &thingsClient{cc}
}

func (c *thingsClient) Create(ctx context.Context, in *Thing, opts ...grpc.CallOption) (*Thing, error) {
	out := new(Thing)
	err := grpc.Invoke(ctx, "/things.Things/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *thingsClient) Get(ctx context.Context, in *GetThingRequest, opts ...grpc.CallOption) (*Thing, error) {
	out := new(Thing)
	err := grpc.Invoke(ctx, "/things.Things/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *thingsClient) Query(ctx context.Context, in *QueryThingsRequest, opts ...grpc.CallOption) (Things_QueryClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Things_serviceDesc.Streams[0], c.cc, "/things.Things/Query", opts...)
	if err != nil {
		return nil, err
	}
	x := &thingsQueryClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Things_QueryClient interface {
	Recv() (*Thing, error)
	grpc.ClientStream
}

type thingsQueryClient struct {
	grpc.ClientStream
}

func (x *thingsQueryClient) Recv() (*Thing, error) {
	m := new(Thing)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Things service

type ThingsServer interface {
	Create(context.Context, *Thing) (*Thing, error)
	Get(context.Context, *GetThingRequest) (*Thing, error)
	Query(*QueryThingsRequest, Things_QueryServer) error
}

func RegisterThingsServer(s *grpc.Server, srv ThingsServer) {
	s.RegisterService(&_Things_serviceDesc, srv)
}

func _Things_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Thing)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThingsServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/things.Things/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThingsServer).Create(ctx, req.(*Thing))
	}
	return interceptor(ctx, in, info, handler)
}

func _Things_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetThingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThingsServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/things.Things/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThingsServer).Get(ctx, req.(*GetThingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Things_Query_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(QueryThingsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ThingsServer).Query(m, &thingsQueryServer{stream})
}

type Things_QueryServer interface {
	Send(*Thing) error
	grpc.ServerStream
}

type thingsQueryServer struct {
	grpc.ServerStream
}

func (x *thingsQueryServer) Send(m *Thing) error {
	return x.ServerStream.SendMsg(m)
}

var _Things_serviceDesc = grpc.ServiceDesc{
	ServiceName: "things.Things",
	HandlerType: (*ThingsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Things_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Things_Get_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Query",
			Handler:       _Things_Query_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "things.proto",
}

func init() { proto.RegisterFile("things.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 243 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x91, 0x4d, 0x4e, 0xc3, 0x30,
	0x10, 0x85, 0x71, 0x9a, 0x18, 0x75, 0x54, 0x40, 0x1a, 0x21, 0xb0, 0xba, 0x0a, 0x59, 0x65, 0x55,
	0x10, 0x48, 0x5c, 0x00, 0xa1, 0xae, 0xb1, 0xb8, 0x40, 0x68, 0xa6, 0xd4, 0x12, 0x8d, 0x8b, 0x3d,
	0x5d, 0x70, 0x16, 0x2e, 0x8b, 0x32, 0x4e, 0x16, 0x34, 0xbb, 0xf9, 0xe6, 0xe7, 0x3d, 0x3d, 0x1b,
	0x16, 0xbc, 0x73, 0xdd, 0x67, 0x5c, 0x1d, 0x82, 0x67, 0x8f, 0x3a, 0x51, 0xf5, 0x0a, 0xc5, 0x7b,
	0x5f, 0xe1, 0x25, 0x64, 0xae, 0x35, 0xaa, 0x54, 0x75, 0x6e, 0x33, 0xd7, 0x22, 0x42, 0xde, 0x35,
	0x7b, 0x32, 0x59, 0xa9, 0xea, 0xb9, 0x95, 0x1a, 0x0d, 0x9c, 0x6f, 0x7c, 0xc7, 0xd4, 0xb1, 0x99,
	0x95, 0xaa, 0x5e, 0xd8, 0x11, 0xab, 0x3b, 0xb8, 0x5a, 0x13, 0x8b, 0x92, 0xa5, 0xef, 0x23, 0x45,
	0x3e, 0x15, 0xac, 0x0e, 0x80, 0x6f, 0x47, 0x0a, 0x3f, 0xb2, 0x14, 0xc7, 0xad, 0x1b, 0xd0, 0x91,
	0x9a, 0xb0, 0xd9, 0xc9, 0xe6, 0xdc, 0x0e, 0x84, 0xd7, 0x50, 0xf8, 0xd0, 0x52, 0x18, 0xfc, 0x13,
	0xf4, 0xdd, 0x2f, 0xb7, 0x77, 0xc9, 0x3e, 0xb7, 0x09, 0x7a, 0x0d, 0xbf, 0xdd, 0x46, 0x62, 0x93,
	0x4b, 0x7b, 0xa0, 0xc7, 0x5f, 0x05, 0x3a, 0xb9, 0x61, 0x0d, 0xfa, 0x25, 0x50, 0xc3, 0x84, 0x17,
	0xab, 0xe1, 0x1d, 0x64, 0xb2, 0xfc, 0x8f, 0xd5, 0x19, 0xde, 0xc3, 0x6c, 0x4d, 0x8c, 0xb7, 0x63,
	0xff, 0x24, 0xd6, 0xf4, 0xe0, 0x19, 0x0a, 0xc9, 0x85, 0xcb, 0x71, 0x32, 0x8d, 0x39, 0xb9, 0x7a,
	0x50, 0x1f, 0x5a, 0x3e, 0xe2, 0xe9, 0x2f, 0x00, 0x00, 0xff, 0xff, 0x8b, 0xd1, 0xb3, 0xac, 0x98,
	0x01, 0x00, 0x00,
}
